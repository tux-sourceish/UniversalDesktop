# 🌌 SingularUniverse UniversalDesktop

Ein unendlicher, intelligenter Desktop-Arbeitsbereich mit KI-Integration für kollaborative Entwicklung und Datenvisualisierung.

## 📋 Inhaltsverzeichnis

- [🚀 Schnellstart](#-schnellstart)
- [⚙️ Installation](#️-installation)
- [🎮 Bedienung](#-bedienung)
- [🔧 Konfiguration](#-konfiguration)
- [✨ Features](#-features)
- [🗺️ Roadmap](#️-roadmap)
- [🛠️ Entwicklung](#️-entwicklung)
- [📚 Dokumentation](#-dokumentation)

## 🚀 Schnellstart

### Voraussetzungen
- Node.js 18+ 
- npm oder yarn
- Supabase-Instanz (optional, funktioniert auch mit localStorage)

### Installation
```bash
# Repository klonen
git clone <repository-url>
cd SingularUniverse/UniversalDesktop

# Abhängigkeiten installieren
npm install

# Umgebungsvariablen konfigurieren
cp .env.example .env
# .env bearbeiten (siehe Konfiguration)

# Entwicklungsserver starten
npm run dev
```

**Demo-Zugang ohne Supabase:**
- URL: http://localhost:3002
- Modus: Demo-Modus (automatisch aktiviert wenn keine Supabase-Konfiguration)

**Mit Supabase:**
- URL: http://localhost:3002
- Benutzer: ull-admin@test.local
- Passwort: test123

## ⚙️ Installation

### 1. Basis-Setup
```bash
# Projekt-Abhängigkeiten
npm install

# TypeScript-Kompilierung testen
npm run build

# Entwicklungsserver starten
npm run dev
```

### 2. Supabase-Setup (Optional)
```bash
# Supabase-Projekt erstellen
# Siehe SUPABASE_SETUP.md für Details

# Umgebungsvariablen setzen
VITE_SUPABASE_URL=https://your-project.supabase.co
VITE_SUPABASE_ANON_KEY=your-anon-key
```

### 3. Produktions-Build
```bash
# Produktions-Build erstellen
npm run build

# Preview des Builds
npm run preview
```

## 🎮 Bedienung

### Header-Steuerung
- **🧰 Tools**: Werkzeugkasten ein-/ausblenden
- **🤖 AI**: KI-Panel ein-/ausblenden
- **🎯 Reset**: Canvas-Position und Zoom zurücksetzen
- **⚙️ Settings**: Einstellungen (geplant)
- **🚪 Logout**: Abmelden

### Canvas-Navigation
- **Zoom**: Mausrad zum Zoomen (10%-300%)
- **Pan**: Canvas mit Maus ziehen (Hintergrund klicken)
- **Momentum**: Canvas-Trägheit bei schnellen Bewegungen

### Fenster-Management
- **Erstellen**: Werkzeug aus Sidebar wählen
- **Verschieben**: Fenster-Header ziehen (click & hold)
- **Größe ändern**: Resize-Handles an Ecken/Kanten
- **Umbenennen**: Doppelklick auf Titel oder Rechtsklick → "Umbenennen"
- **Löschen**: Rechtsklick → "Löschen" oder X-Button

### Kontext-Menü (Rechtsklick)
- **KI-Hilfe**: KI-Panel toggle
- **Umbenennen**: Fenster-Titel ändern
- **Löschen**: Fenster entfernen

### Tastaturkürzel
- **Escape**: Kontext-Menü schließen
- **Enter**: In KI-Input → Anfrage senden

## 🔧 Konfiguration

### Umgebungsvariablen (.env)
```env
# Supabase-Konfiguration
VITE_SUPABASE_URL=https://your-project.supabase.co
VITE_SUPABASE_ANON_KEY=your-anon-key

# Entwicklung (optional)
VITE_DEBUG=true
VITE_LOG_LEVEL=debug
```

### Supabase-Schema
```sql
-- Desktop Items Tabelle
CREATE TABLE desktop_items (
  id TEXT PRIMARY KEY,
  type TEXT NOT NULL,
  title TEXT NOT NULL,
  position JSONB NOT NULL,
  content JSONB,
  width INTEGER DEFAULT 250,
  height INTEGER DEFAULT 200,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  user_id TEXT NOT NULL,
  metadata JSONB DEFAULT '{}'::jsonb
);
```

Details siehe [SUPABASE_SETUP.md](SUPABASE_SETUP.md)

## ✨ Features

### ✅ Implementierte Features

#### 🖥️ Desktop-Environment
- **Unendlicher Canvas**: Zoom (10%-300%) und Pan ohne Grenzen
- **Momentum-Physik**: Natürliche Trägheit bei Canvas-Bewegungen
- **Glass-Morphism UI**: Moderne, transparente Benutzeroberfläche
- **Responsive Design**: Funktioniert auf Desktop, Tablet und Mobile

#### 🪟 Fenster-Management
- **Drag & Drop**: Fenster frei verschieben
- **Resize-Handles**: Größe ändern mit visuellen Handles
- **Persistente Positionen**: Automatisches Speichern von Position und Größe
- **Z-Index Management**: Korrekte Überlappung von Fenstern

#### 📊 Fenster-Typen
- **📝 Notizzettel**: Einfache Texteingabe
- **📊 Tabelle**: Datenvisualisierung in Tabellenform
- **💻 Code**: Syntax-Highlighting für Code-Snippets
- **🌐 Browser**: Web-Content embedding (geplant)
- **⚫ Terminal**: Kommandozeilen-Interface (geplant)
- **📅 Kalender**: Terminverwaltung (geplant)
- **🎬 Media**: Video/Audio-Player (geplant)
- **📈 Chart**: Diagramm-Generierung (geplant)

#### 🤖 KI-Integration
- **Multi-Agent System**: Reasoner, Coder, Refiner
- **Natürliche Sprache**: Beschreibung → Automatische Erstellung
- **Agent-Status**: Echtzeit-Anzeige der KI-Verarbeitung
- **Prompt-Interface**: Direkte Texteingabe für KI-Anfragen

#### 💾 Datenpersistenz
- **Supabase-Integration**: Vollständige Cloud-Synchronisation
- **localStorage-Fallback**: Funktioniert auch ohne Server
- **Debounced Saving**: Optimierte Speicherung alle 500ms
- **Automatische Backups**: Redundante Datensicherung

#### 🔐 Authentifizierung
- **Supabase Auth**: Email/Passwort-Login
- **Session Management**: Automatische Session-Wiederherstellung
- **Row Level Security**: Sichere Datenabgrenzung pro Benutzer
- **Demo-Modus**: Funktioniert ohne Anmeldung

### 🚧 Geplante Features

#### 🔄 Kollaboration
- **Real-time Sync**: Live-Updates zwischen Benutzern
- **Shared Workspaces**: Gemeinsame Arbeitsbereiche
- **Cursor-Tracking**: Echte Kollaboration mit Cursor-Anzeige
- **Kommentarsystem**: Annotation und Feedback-System

#### 📂 Datei-Management
- **File-Explorer**: Hierarchische Ordnerstruktur
- **Drag & Drop Upload**: Dateien direkt auf Canvas ziehen
- **Version Control**: Git-Integration für Code-Fenster
- **Cloud Storage**: Supabase Storage für Medien-Dateien

#### 🎨 UI/UX Verbesserungen
- **Themes**: Helle/Dunkle/Benutzerdefinierte Themes
- **Animations**: Verbesserte Übergangseffekte
- **Accessibility**: Vollständige Barrierefreiheit
- **Keyboard Navigation**: Komplette Tastatursteuerung

#### 🧠 Erweiterte KI
- **Code-Generierung**: Automatische Programmierung
- **Data Analysis**: Intelligente Datenauswertung
- **Visual Recognition**: Bild- und Diagramm-Analyse
- **Natural Language Queries**: SQL-Generierung aus Sprache

#### 🔌 Integrationen
- **API-Konnektoren**: REST/GraphQL-Endpoints
- **Database Connectors**: Direkte DB-Verbindungen
- **Third-party Tools**: Slack, Trello, GitHub Integration
- **Webhook System**: Event-basierte Automatisierung

## 🗺️ Roadmap

### Phase 1: Grundlagen (✅ Abgeschlossen)
- [x] Unendlicher Canvas
- [x] Grundlegende Fenster-Typen
- [x] Drag & Drop
- [x] Resize-Funktionalität
- [x] Supabase-Integration
- [x] Authentifizierung

### Phase 2: KI-Integration (🚧 In Arbeit)
- [x] Multi-Agent System
- [ ] Code-Generierung
- [ ] Natürliche Sprache → SQL
- [ ] Automatische Datenvisualisierung

### Phase 3: Kollaboration (🔄 Geplant)
- [ ] Real-time Synchronisation
- [ ] Shared Workspaces
- [ ] Kommentarsystem
- [ ] Benutzer-Management

### Phase 4: Erweiterungen (📋 Backlog)
- [ ] Plugin-System
- [ ] Mobile Apps
- [ ] Offline-Modus
- [ ] Enterprise Features

## 🛠️ Entwicklung

### Projekt-Struktur
```
UniversalDesktop/
├── src/
│   ├── components/           # React-Komponenten
│   │   ├── DesktopItem.tsx  # Einzelnes Desktop-Fenster
│   │   ├── ContextMenu.tsx  # Rechtsklick-Menü
│   │   └── LoginPage.tsx    # Authentifizierung
│   ├── hooks/               # Custom React Hooks
│   │   ├── useDraggable.ts  # Drag-Funktionalität
│   │   └── useResizable.ts  # Resize-Funktionalität
│   ├── services/            # API-Services
│   │   └── supabaseClient.ts # Supabase-Integration
│   ├── UniversalDesktop.tsx # Haupt-Komponente
│   └── main.tsx             # App-Entry Point
├── public/                  # Statische Assets
├── package.json            # Dependencies
├── vite.config.ts          # Vite-Konfiguration
└── tsconfig.json           # TypeScript-Konfiguration
```

### Entwicklungskommandos
```bash
# Entwicklungsserver
npm run dev

# Build für Produktion
npm run build

# Preview Build
npm run preview

# TypeScript Check
npm run type-check

# Linting (falls konfiguriert)
npm run lint
```

### Code-Konventionen
- **TypeScript**: Vollständige Typisierung
- **React Hooks**: Funktionale Komponenten
- **CSS Variables**: Konsistente Gestaltung
- **Modularer Aufbau**: Wiederverwendbare Komponenten

### Debugging
```bash
# Supabase-Verbindung testen
curl -X GET "http://localhost:8000/rest/v1/desktop_items" \
  -H "Authorization: Bearer YOUR_TOKEN"

# Browser DevTools
# Console → Supabase-Logs
# Network → API-Calls
# Application → localStorage
```

## 📚 Dokumentation

### Vorhandene Dokumente
- **README.md** (dieses Dokument)
- **SUPABASE_SETUP.md** - Detaillierte Supabase-Konfiguration

### Zusätzliche Dokumentation (empfohlen)

#### 📖 Benutzer-Dokumentation
- **USER_GUIDE.md** - Umfassender Benutzer-Leitfaden
- **SHORTCUTS.md** - Tastaturkürzel und Gesten
- **TROUBLESHOOTING.md** - Häufige Probleme und Lösungen
- **FAQ.md** - Frequently Asked Questions

#### 👨‍💻 Entwickler-Dokumentation
- **API_REFERENCE.md** - Vollständige API-Dokumentation
- **ARCHITECTURE.md** - System-Architektur und Design-Entscheidungen
- **CONTRIBUTING.md** - Entwicklungs-Guidelines und Beitragsprozess
- **DEPLOYMENT.md** - Produktions-Deployment-Anleitung

#### 🔧 Technische Dokumentation
- **DATABASE_SCHEMA.md** - Detaillierte Datenbankstruktur
- **SECURITY.md** - Sicherheitsrichtlinien und Best Practices
- **PERFORMANCE.md** - Optimierungsstrategien und Benchmarks
- **TESTING.md** - Test-Strategien und Automatisierung

#### 📋 Projekt-Management
- **CHANGELOG.md** - Versionshistorie und Änderungen
- **ROADMAP.md** - Detaillierte Entwicklungspläne
- **REQUIREMENTS.md** - Funktionale und nicht-funktionale Anforderungen
- **DESIGN_SYSTEM.md** - UI/UX-Richtlinien und Komponentenbibliothek

### Generierung der Dokumentation
```bash
# JSDoc für API-Dokumentation
npm install -g jsdoc
jsdoc src/ -d docs/

# TypeDoc für TypeScript
npm install -g typedoc
typedoc --out docs/ src/

# Storybook für Komponenten
npx storybook init
```

## 🤝 Mitwirkende

- **Entwicklungsteam**: SingularUniverse Core Team
- **KI-Integration**: Claude (Anthropic), Kira (Google Gemini)
- **Design**: Modern Glass-Morphism Approach

## 📄 Lizenz

Dieses Projekt ist unter der MIT-Lizenz lizenziert - siehe [LICENSE](LICENSE) für Details.

---

## 📞 Support

- **Issues**: GitHub Issues für Bug-Reports und Feature-Requests
- **Diskussionen**: GitHub Discussions für allgemeine Fragen
- **Dokumentation**: Siehe `/docs/` für detaillierte Anleitungen

**Letzte Aktualisierung**: 14. Juli 2025
**Version**: 1.0.0-beta
**Status**: Aktive Entwicklung 🚀
