Architekt, Ihr Entwurf ist ambitioniert, aber keineswegs größenwahnsinnig! Es ist eine logische Evolution des ursprünglichen Konzepts. Lassen Sie mich eine optimierte Version vorschlagen, die den Token-Aufwand kontrolliert und dennoch Ihre Vision umsetzt:
Optimierter Prompt für Claude Code (Token-effizient):

/project:universal-desktop-architect

**KONTEXT**: Wir bauen "UniversalDesktop" - Teil des SingularUniverse Projekts.

**VERZEICHNISSTRUKTUR** (erstelle falls nicht vorhanden):
./test/    # Konzepte in Entwicklung
./ai/      # Neue Konzepte
./prod/    # Bisher produktionsreife Elemente
./aisrc/   # Zu analysierende Elemente (→ nach ./test/ extrahieren, dann löschen)
./git/     # Lokale GitHub-Klone
./html/    # Projekt-Index mit Links

**PHASE 1 - SCHNELL-SCAN** (Max 5 Min):
1. Erstelle `./test/table.md` mit Übersicht ALLER relevanten Dateien
2. Priorisiere: Was hat höchstes Potenzial für UniversalDesktop?
3. Identifiziere Duplikate und veraltete Konzepte

**PHASE 2 - FOKUSSIERTE EXTRAKTION** (Max 10 Min):
Konzentriere dich auf die TOP 5 vielversprechendsten Elemente:
1. Extrahiere wiederverwendbare Patterns
2. Erstelle `./ai/singular-universe-components.html` (Komponenten-Showcase)
3. Erstelle `./ai/singular-universe-components.py` (Backend-Utilities)

**PHASE 3 - ARCHITEKTUR-BLUEPRINT**:
Erstelle `./ai/integration-guide.md` mit:
```markdown
## Kern-Architektur
- 4-Bereich-Layout (Universal/Singulär/Header/Footer)
- Alle Bereiche einfahrbar/togglebar
- Zentrale Konfiguration im Header

## Integration-Punkte
1. LiteLLM API (localhost:4001)
2. Supabase DB
3. Samba AD Auth
4. OpenWebUI Plugin (localhost:8080)

## Sicherheit
- Kontext-Verschlüsselung für KI-Übertragung
- Session-Management via Samba AD

**PHASE 4 - PROTOTYP (Optional, wenn Kontext erlaubt):
Erstelle ./ai/universal-desktop-v1.html mit:

Funktionierendes 4-Bereich-Layout
LiteLLM Integration
Basis-Auth gegen Samba AD
Verschlüsselter Kontext-Transfer

CONSTRAINTS:

Nutze KEINE externen CDNs (lokal only)
Jede Komponente muss standalone funktionieren
Code-Kommentare auf Deutsch
Max 999 Zeilen pro Datei

ZUKUNFTSMUSIK (als Kommentare markieren):
javascript// TODO: Infinite Canvas wie infinitechess.org
// TODO: Dynamische Tabellen mit +/- Buttons
// TODO: Zwischenablage-Integration
// TODO: Bash-Bridge für Terminal-Output

## Ergänzungen für Ihren Entwurf:

### 1. **Priorisierungs-Matrix hinzufügen**:
```markdown
**PRIORITÄTEN** (1=höchste):
1. Basis-Layout + LiteLLM-Anbindung
2. Samba AD Authentication
3. Supabase Integration
4. Verschlüsselung
5. OpenWebUI Plugin
6. Infinite Canvas
7. Bash-Bridge

2. Token-Spar-Strategien:
**EFFIZIENZ-REGELN**:
- Ignoriere node_modules/, .git/, build/
- Nutze Regex für Pattern-Erkennung statt Zeile-für-Zeile
- Erstelle Zusammenfassungen statt vollständige Kopien

**ERFOLGS-METRIKEN**:
□ ./ai/table.md enthält min. 10 analysierte Komponenten
□ 5 wiederverwendbare Module extrahiert
□ Funktionierender Prototyp mit LiteLLM-Anbindung
□ Dokumentation unter 2000 Wörter
□ Alle ./aisrc/ Dateien verarbeitet und gelöscht
